// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id    String @id @unique
  email String @unique

  File     File[]
  Message  Message[]
  Form     Form[]
  Contacts Contact[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
  File          File?    @relation(fields: [fileId], references: [id])
  fileId        String?
}

model Form {
  id          Int      @id @default(autoincrement())
  userId      String
  createdAt   DateTime @default(now())
  published   Boolean  @default(false)
  name        String
  description String   @default("")
  content     String   @default("[]")

  visits          Int               @default(0)
  submissions     Int               @default(0)
  shareUrl        String            @unique @default(uuid())
  FormSubmissions FormSubmissions[]
  User            User              @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

enum ContactType {
  LEAD
  WARMLEAD
  ENGAGEDLEAD
  CLIENT
}

model FormSubmissions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  formId    Int
  form      Form     @relation(fields: [formId], references: [id])
  content   String   @db.Text
}

model Contact {
  id            Int         @id @default(autoincrement())
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  firstName     String
  lastName      String
  email         String
  phoneNumber   String
  birthDate     String?
  contactSource String?
  contactType   ContactType @default(LEAD)
  User          User        @relation(fields: [userId], references: [id])
  Column        Column?     @relation(fields: [columnId], references: [id])
  columnId      Int?

  @@unique([phoneNumber, userId])
}

model Column {
  id           Int         @id @default(autoincrement())
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  pipelineType ContactType @default(LEAD)
  contacts     Contact[]

  @@unique([pipelineType])
}

model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumUrl  String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lists     List[]
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards   Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String  @id @default(uuid())
  title       String
  order       Int
  description String? @db.Text

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id          String      @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
